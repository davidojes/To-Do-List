@page
@using Microsoft.AspNetCore.Identity

@model ToDoList.HomeModel
@inject UserManager<IdentityUser> UserManager

@using Controllers;
@using Microsoft.AspNetCore.Hosting;
@using ToDoList.Data;
@using Services;
@using Repositories;

@{
  ViewData["Header"] = @UserManager.GetUserName(User) + "'s To-Do List";
  ViewData["Title"] = "Home";

  var taskClass = "";
  var isTicked = "false";
}

<div class="list-container-wrapper">
  <div class="list-container">
    <div class="task-list-header">
      <h2>Tasks</h2>
      <h4>Click a task to complete it</h4>
    </div>
    <!-- ul to display to do list -->
    <ul id="taskList" class="task-list">
      @foreach (var item in Model.ToDoListItems)
      {
        if (item.IsCompeleted) { taskClass = "completed-task"; isTicked = "true"; }
        else { taskClass = ""; isTicked = "false"; }

        if (item.UserEmail.Equals(UserManager.GetUserName(User)))
        {
      <li>
        @*iscompleted*@
        <span class="input-box">
          <input checked="@isTicked" asp-for="toDoListItem.IsCompeleted" />
        </span>

        @*item text*@
        <span class="@taskClass">@Html.DisplayFor(modelItem => item.Description)</span>

        @*<form class="delete-form" method="post" asp-page-handler="delete" asp-route-id="@item.Id">
      <input type="hidden" asp-for="toDoListItem.Id" />
      <input type="submit" class="delete-link" />
    </form>*@

        <button class="edit-button">Edit</button>

        <form class="delete-form" method="post" asp-page-handler="delete" asp-route-id="@item.Id">
          <input type="hidden" asp-for="toDoListItem.Id" />
          <input type="submit" class="delete-link" />
        </form>
      </li>
        @*<a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
          <a asp-page="./Details" asp-route-id="@item.Id">Details</a> *@

      }
    }
    </ul>
    <br />

    @*input bar*@
    <div class="task-list-inputbar">
      <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
          @*concern that there may be browser vulnerabilities (being able to change useremail value)*@
          <input asp-for="toDoListItem.UserEmail" class="form-control" value="@UserManager.GetUserName(User)" placeholder="User Email" hidden />
          <span asp-validation-for="toDoListItem.UserEmail" class="text-danger"></span>
        </div>
        <div class="form-group">
          <input asp-for="toDoListItem.Description" class="form-control" id="inputBox" placeholder="Enter Task" />
          <input type="submit" value="Add Task" class="btn btn-primary add-task-button" onclick="addTask()" />
          <span asp-validation-for="toDoListItem.Description" class="text-danger"></span>
        </div>

        

        @*submit button*@
        <div class="add-task-button-container">

        </div>
      </form>
      @*end of input bar*@
    </div>
  </div>

  <br />

  <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
    <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
  </form>
</div>

<script>
  var userInput = "";
  var inputIsValid = false;
  var taskList = document.getElementById("taskList");
  var taskListItems = taskList.children;
  var newTaskListItem;
  var checkBox = document.getElementById("checkBox");
  var deleteButtons = document.getElementsByClassName("delete-link");
  deleteButtons = Array.from(deleteButtons);
  deleteButtons.forEach(setUpDelete);

  // add event listeners to task list items
  taskListItems = Array.from(taskListItems);
  taskListItems.forEach(taskListItemSetup);

  // a function that attaches an onclick event listener to each list item
  function taskListItemSetup(item) {
    item.addEventListener("click", checkOffItem);
  }

  // a function that adds delete symbol to buttons
  function setUpDelete(item) {
    item.value = "\u00D7";
  }

    // a function that adds the text in the input box to the task list
    function addTask() {
      userInput = document.getElementById("inputBox").value;
      validateInput(userInput);

      if (inputIsValid) {
        newTaskListItem = document.createElement("li");
        taskList.appendChild(newTaskListItem);
        newTaskListItem.innerHTML = userInput;
        taskListItemSetup(newTaskListItem);
      }
    }

    // a function that checks or unchecks a list item depending on it's current state
    function checkOffItem() {
      if (this.className == "completed-task") this.className = "";
      else this.className = "completed-task";
    }

    // a function that deletes a list item
    function deleteTask() {
      this.parentElement.remove();
    }

    // a function that checks if user input is valid
    function validateInput(input) {
      if (input.trim() != "") {
        console.log("x")
        inputIsValid = true;
      }

      else (alert("You need to enter some text"));
    }
</script>



