@page
@using Microsoft.AspNetCore.Identity

@model ToDoList.HomeModel
@inject UserManager<IdentityUser> UserManager

@using Controllers;
@using Microsoft.AspNetCore.Hosting;
@using ToDoList.Data;
@using Services;
@using Repositories;

@{
  ViewData["Header"] = @UserManager.GetUserName(User) + "'s To-Do List";
  ViewData["Title"] = "Home";

  var taskClass = "";
  var isTicked = "";
}

<div class="list-container-wrapper">
  <div class="list-container">
    <div class="task-list-header">
      <h2>Tasks</h2>
      <h4>Click a task to complete it</h4>
    </div>
    <!-- ul to display to do list -->
    <ul id="taskList" class="task-list">
      @foreach (var item in Model.ToDoListItems)
      {
        if (item.IsCompeleted) { taskClass = "completed-task"; isTicked = "isTicked"; }
        else { taskClass = ""; isTicked = ""; }

        @* checks if the primary key of the current list item matches the currently logged in user *@
        if (item.UserEmail.Equals(UserManager.GetUserName(User)))
        {
          <li>

            <span class="checkbox-container">
              <input type="checkbox" class="@isTicked checkbox" />
              <!-- task list item -->
              <span class="@taskClass taskListItem">@Html.DisplayFor(modelItem => item.Description)</span>
            </span>
            <!-- edit button -->
            <button class="edit-button">Edit</button>
            <!-- delete button -->
            <form class="delete-form" method="post" asp-page-handler="delete" asp-route-id="@item.Id">
              <input type="hidden" asp-for="toDoListItem.Id" />
              <input type="submit" class="delete-link" />
            </form>
          </li>
          @*<a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
            <a asp-page="./Details" asp-route-id="@item.Id">Details</a> *@

        }
      }
    </ul>
    <br />

    <!-- add task bar -->
    <div class="task-list-inputbar">
      <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
          <!-- concern that there may be browser vulnerabilities (being able to change useremail value) -->
          <input asp-for="toDoListItem.UserEmail" class="form-control" value="@UserManager.GetUserName(User)" placeholder="User Email" hidden />
          <span asp-validation-for="toDoListItem.UserEmail" class="text-danger"></span>
        </div>
        <!-- input box for entering task description -->
        <div class="form-group">
          <input asp-for="toDoListItem.Description" class="form-control" id="inputBox" placeholder="Enter Task" />
          <!-- add task button -->
          <input type="submit" value="Add Task" class="btn btn-primary add-task-button" onclick="addTask()" />
          <span asp-validation-for="toDoListItem.Description" class="text-danger"></span>
        </div>
      </form>
      <!-- end of input bar -->
    </div>
  </div>
  <br />

  <!-- logout button -->
  <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
    <button id="logout" type="submit">Logout</button>
  </form>
</div>

<script>
  var userInput = "";
  var inputIsValid = false;

  // get tasklist and items
  var taskListItems = document.getElementsByClassName("taskListItem");
    //var taskListItems = taskList.children;
  // convert the children of the task list into an array
  taskListItems = Array.from(taskListItems);
  // call the setup function on each task list item
  taskListItems.forEach(setupTaskListItems);
  var newTaskListItem;

  // get and setup all delete buttons
  var deleteButtons = document.getElementsByClassName("delete-link");
  deleteButtons = Array.from(deleteButtons);
  deleteButtons.forEach(setupDelete);

  // get and setup all checkboxes
  var checkBoxes = document.querySelectorAll("input[type='checkbox']");
  checkBoxes = Array.from(checkBoxes);
  checkBoxes.forEach(setupCheckBox);



  /* these are all setup related functions */

  // a function that attaches an onclick event listener to each list item
  function setupTaskListItems(item) {
    let pairedItem = item.parentElement.children[0];
    item.addEventListener("click", function () {
      if (item.className == "completed-task taskListItem") {
        item.className = "taskListItem";
        pairedItem.checked = false;
        pairedItem.className = "checkbox"

      }
      else {
        item.className = "completed-task taskListItem";
        pairedItem.checked = true;
        pairedItem.className = "isTicked checkbox"
      }
    });

  }

  // a function that adds delete symbol to buttons
  function setupDelete(item) {
    item.value = "\u00D7";
  }

  // a function that checks off complete task on load
  // it also adds an onclick event listener that strikes out its paired list item
  function setupCheckBox(item) {
    if (item.className == "isTicked checkbox")
      item.checked = true;

    item.addEventListener("click", function () {
      let pairedItem = this.parentElement.children[1];
      console.log(this);
      console.log(pairedItem);
      if (this.checked == false) {
        this.className = "checkbox";
        this.checked = false;
        pairedItem.className = "taskListItem";
      }
      else {
        this.className = "isTicked checkbox";
        this.checked = true;
        pairedItem.className = "completed-task taskListItem"
      }
    });
  }


  /* these are all feature related functions */

  // a function that adds the text in the input box to the task list
  function addTask() {
    userInput = document.getElementById("inputBox").value;
    validateInput(userInput);

    if (inputIsValid) {
      newTaskListItem = document.createElement("li");
      taskList.appendChild(newTaskListItem);
      newTaskListItem.innerHTML = userInput;
      taskListItemSetup(newTaskListItem);
    }
  }

  // a function that deletes a list item
  function deleteTask() {
    this.parentElement.remove();
  }

  // a function that checks if user input is valid
  function validateInput(input) {
    if (input.trim() != "") {
      console.log("x")
      inputIsValid = true;
    }

    else (alert("You need to enter some text"));
  }
</script>



